# -*- coding: utf-8 -*-
"""Untitled1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10_Ju6rpZLDJEura1BD7TS9Vsi98rhZEj
"""

import numpy as np
prime_numbers = [3, 5, 7, 11, 13, 17]
exp = 10000
not_prime_counter = 0

for i in range(exp):
  # randomely select 3 numbers from 3 dice
  game = np.random.choice([1,2,3,4,5,6], 3)
  # sum up all
  game_sum = sum(game)
  # if-condition: if the sum is not prime numbers, counter + 1
  if game_sum not in prime_numbers:
    not_prime_counter +=1


# print the possiblities
print(not_prime_counter / exp)

lockers = [' '] * 100
#print(lockers)

for student in range(1,101): #start, stop
    for locker in range(student, 101, student):
        if lockers[locker-1] == ' ':
            lockers[locker-1] = 'o'
        else:
            lockers[locker-1] = ' '
print(''.join(lockers))

import random
numberOfStreaks = 0
for experimentNumber in range(10000):
 # Code that creates a list of 100 'heads' or 'tails' values.
  list = []
  for i in range(100):
    game = random.choice(["H", "T"])
    list.append(game)
    list_string = ''.join(list)
  #print(list_string)

 # Code that checks if there is a streak of 6 heads or tails in a row.
  if "H"*6 in list_string or "T"*6 in list_string:
     numberOfStreaks += 1

print('Chance of streak: %s%%' % (numberOfStreaks / 100))

import numpy as np
exp= 10000
counter_streaks = 0
for i in range(exp):
  game_n = np.random.choice(["H", "T"], 100)
  list_n_string = ''.join(game_n)

  if "H"*6 in list_n_string or "T"*6 in list_n_string:
    counter_streaks += 1

print("Q4-numpy: ",counter_streaks/exp)

class Complex:
    def __init__(self, real, imag):
        self.real = real
        self.imag = imag
    def __str__(self):
        return str(self.real) + " + i * " + str(self.imag)
    def __add__(self, other):
        return Complex(self.real + other.real, self.imag + other.imag)

c1 = Complex(3, 5)
c2 = Complex(4, 5)
print(c1) # __str__works
print(c1 + c2) #__add__ works

class Creature:
    def __init__(self, name):
        self.name = name
        print("Creature " + self.name + " created.")
    def talk(self):
        return "My name is " + self.name + " and I am a " + type(self).__name__ + self.makeSound();
    def makeSound(self):
        return ""

class Dog(Creature):
    def __init__(self, name):
        super().__init__(name)
    def makeSound(self):
        return ": woof."


class Cow(Creature):
    def __init__(self, name):
        super().__init__(name)
    def makeSound(self):
        return ": moo."

dog1 = Dog("Doggie")
print(dog1.talk())
cow1 = Cow("Coco")
print(cow1.talk())

class LinkedList:
    def __init__(self, num, next):
        self.num = num
        self.next = next
        # self.head = None
    def show(self):
        temp = self
        result = ""
        while (temp):
            # print(temp.num)
            result = result + "|" + temp.num + "|"
            temp = temp.next
        print(result)

# NOTE: how to test this?
print("---------------------------Class LinkedList---------------------------")
a = LinkedList("Christa", None) # christa -> None
a = LinkedList("Ahmed", a) # Ahmed -> Christa -> None
a.show()

class person:
  def __init__(self, name, age):
      self.name = name
      self.age = age

  def call_p(self):
    print("My Name and age is ", self.name, self.age)

a = person("Zeel", 23)
print(a.call_p())

class BinaryTree:
    def __init__(self, value, left, right):
        (self.value, self.left, self.right) = (value, left, right)
    def show(self):
        if self.left == None:
            left = " . "
        else:
            left = self.left.show()

        if self.right == None:
            right = " . "
        else:
            right = self.right.show()

        return "(" + left + " " + str(self.value) + " " + right + ")"


print("---------------------------Class BinaryTree---------------------------")
a = BinaryTree(6, None, None)
print(a.show())

b = BinaryTree(3, None, a)
print(b.show())

c = BinaryTree(9, None, None)
print(c.show())

d = BinaryTree(8, None, c)
print(d.show())

e = BinaryTree(7, b, d)
print(e.show())

import math
import random

# Point
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y
    def __str__(self):
        return "(" + str(self.x) + ", " + str(self.y) + ")"
    def distanceTo(self, otherPoint):
        dx = self.x - otherPoint.x
        dy = self.y - otherPoint.y
        return math.sqrt(dx**2 + dy**2)

def main():
    a = Point(3,2)
    b = Point(-1,5)
    print(a)
    print("I have two point objects: " + str(a) + " " + str(b))
    howFar = a.distanceTo(b)
    print(howFar)

    a = Point(0,0)
    b = Point(1,1)
    print("Distance from " + str(a) + " to " + str(b) + " is: " + str(a.distanceTo(b)))

if __name__ == "__main__":
    main()


# Line
class Line(Point):
    def __init__(self, p1, p2):
        self.p1 = p1
        self.p2 = p2
    def __str__(self):
        return "(" + str(self.p1) + ", " + str(self.p2) + ")"
    def length(self):
        a = self.p2.distanceTo(self.p1)
        return a

def main():
    print("-------------------------Class Line------------------")
    a = Point(3,2)
    b = Point(-1,7)
    c = Line(a,b)
    distance = c.length()
    print("Length of Line ", c, " is: ", distance)

if __name__ == "__main__":
    main()


# Triangle
class Triangle(Point):
    def __init__(self, p1, p2, p3):
        self.p1 = p1
        self.p2 = p2
        self.p3 = p3
    def __str__(self):
        return "(" + str(self.p1) + ", " + str(self.p2) + ", " + str(self.p3) + ")"
    def area(self):
        a = self.p2.distanceTo(self.p1)
        b = self.p1.distanceTo(self.p3)
        c = self.p3.distanceTo(self.p2)
        s = (a + b + c)/2
        area = math.sqrt(s*(s-a)*(s-b)*(s-c))
        return area

def main():
    print("-------------------------Class Line------------------")
    a1 = random.randint(-10, 10)
    a2 = random.randint(-10,10)
    b1 = random.randint(-10,10)
    b2 = random.randint(-10,10)
    c1 = random.randint(-10,10)
    c2 = random.randint(-10,10)

    a = Point(a1, a2)
    b = Point(b1, b2)
    c = Point(c1, c2)
    tri = Triangle(a,b,c)
    A = tri.area()
    print("Area of ", tri, " is: ", A)

if __name__ == "__main__":
    main()


# LinkedList
class Node(object):
    def __init__(self, d, n = None):
        self.data = d
        self.next_node = n
    def get_next(self):
        return self.next_node
    def set_next(self, n):
        self.next_node = n
    def get_data(self):
        return self.data
    def set_data(self,d):
        self.data = d
class LinkedList(object):
    def __init__(self, r = None):
        self.root = r
        self.size = 0
    def get_size(self):
        return self.size
    def add(self,d):
        new_node = Node(d, self.root)
        self.root = new_node
        self.size += 1
    def remove(self,d):
        this_node = self.root
        prev_node = None
        while this_node:
            if this_node.get_data() == d:
                if prev_node:
                    prev_node.set_next(this_node.get_next())
                else:
                    self.root = this_node
                self.size -= 1
                return True
            else:
                prev_node = this_node
                this_node = this_node.get_next()
        return False
    def find(self,d):
        this_node = self.root
        while this_node:
            if this_node.get_data() == d:
                return d
            else:
                this_node = this_node.get_next()
        return None


# BinaryTree
class Node1:
    def __init__(self, value):
        self.data = value
        self.left = None
        self.right = None

class BinaryTree:
    def __init__(self, value, left, right):
        self.value = value
        self.left = left
        self.right = right
    def show(self):
        if self.left == None:
            left = " . "
        else:
            left = self.left.show()
        if self.right == None:
            right = " . "
        else:
            right = self.right.show()
        return "(" + left + " " + str(self.value) + " " + right + ")"

letter = "a"
words = [ "bc", "cb" ]

def ben(letter, words):
    result = []
    for word in words:
        line = []
        for index in range(len(word)+1):
            line += [ word[0:index] + letter + word[index:] ]
        result += line
    return result

a = ben(letter, words)
print( a ) # [ "abc", "bac", "bca", "acb", "cab", "cba" ]

def perm(word):
    if len(word) <= 1:
        return [ word ]
    else:
        return ben(word[0], perm(word[1:])) #ben(h, [a,t])

print(perm("hat")) #h:0, a:1, t:2
print(perm("race"))
print(len(perm("whatever")) == 40320)

assert sorted(perm("hat")) == sorted(['hat', 'aht', 'ath', 'hta', 'tha', 'tah']), "First assert fails."
assert len(perm("race")) == fact(len("race")), "Second assert fails."
assert len(perm("whatever")) == 40320, "Third assert failed."
print ("All assertions passed without a problem")